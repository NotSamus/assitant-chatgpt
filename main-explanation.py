# Code designed and implemented by Jesus R. Lopez
# The comments where generated by Google Gemini


import os # Provides functions for interacting with the operating system, like accessing environment variables.
from openai import OpenAI # The official OpenAI Python client for interacting with OpenAI APIs.
from dotenv import load_dotenv # Used to load environment variables from a .env file.
import time # Provides time-related functions, like delays.
import speech_recognition as sr # A library for performing speech recognition.
import pyttsx3 # A text-to-speech library that works offline.
import numpy as np # A library for numerical operations, used here for random choice.

# Load environment variables from the .env file at the beginning of the script.
# This makes environment variables defined in .env accessible via os.getenv().
load_dotenv() 

# Define the OpenAI model to be used for generating responses.
model = 'gpt-3.5-turbo' 

# --- Speech Recognition and Text-to-Speech Setup ---

# Initialize the Recognizer, which is used to process audio for speech recognition.
r = sr.Recognizer() 

# Initialize the text-to-speech engine.
engine = pyttsx3.init() 

# Get the second available voice (index 1) for the text-to-speech engine.
# You might need to adjust the index depending on available voices on your system.
voice = engine.getProperty('voices')[1] 
engine.setProperty('voice', voice.id) # Set the voice for the text-to-speech engine.

# A list of greetings Pete can say when the wake word is detected.
greetings = ["Hey kids", "yeah?"] 

# Initialize the OpenAI client using the API key loaded from environment variables.
# 'KEY' should correspond to the name of your API key variable in your .env file.
client = OpenAI(api_key=os.getenv('KEY'))


# --- Core Functions ---

def listen_for_wake_word(source):
    """
    Listens for the wake word "Hey Pete" to activate the voice assistant.
    Once detected, it transitions to the main listening and response phase.
    """
    print("Listening for 'Hey Pete'...")
    while True: # Continuously listen until the wake word is detected.
        audio = r.listen(source) # Captures audio from the specified microphone source.
        try:
            # Use Google Speech Recognition to convert audio to text.
            text = r.recognize_google(audio) 
            # Check if the wake word is present in the recognized text (case-insensitive).
            if "hey pete" in text.lower(): 
                print("Wake word detected.")
                # Pete says a random greeting from the 'greetings' list.
                engine.say(np.random.choice(greetings)) 
                engine.runAndWait() # Wait for the speech to complete.
                # Transition to the main listening and response function.
                listen_and_respond(source) 
                break # Exit the wake word listening loop.
        except sr.UnknownValueError:
            # Handle cases where speech is unintelligible.
            pass 


def listen_and_respond(source):
    """
    Listens for user commands after the wake word is detected, sends them to OpenAI,
    and speaks the AI's response. Handles silence and errors.
    """
    print("Listening...")
    while True: # Continuously listen for user input.
        audio = r.listen(source) # Captures audio from the microphone.
        try:
            text = r.recognize_google(audio) # Convert user's speech to text.
            print(f"You said: {text}")
            if not text: # If no speech was recognized, continue listening.
                continue
            
            # Send the recognized text to OpenAI's chat model for a response.
            response = client.chat.completions.create(model=model, messages=[{"role": "user", "content": f"{text}"}]) 
            response_text = response.choices[0].message.content # Extract the AI's response text.
            print(f"OpenAI response: {response_text}")
            engine.say(response_text) # Have Pete speak the AI's response.
            engine.runAndWait() # Wait for Pete to finish speaking.

            if not audio: # This condition might need adjustment based on how 'audio' behaves after silence.
                listen_for_wake_word(source) # If no audio, go back to listening for the wake word.
        except sr.UnknownValueError:
            # If silence is detected or speech is unintelligible.
            time.sleep(2) # Pause briefly.
            print("Silence found, shutting up, listening...")
            listen_for_wake_word(source) # Return to wake word detection.
            break # Exit the listen-and-respond loop.

        except sr.RequestError as e:
            # Handle errors when making requests to the speech recognition service.
            print(f"Could not request results; {e}")
            engine.say(f"Could not request results; {e}")
            engine.runAndWait()
            listen_for_wake_word(source) # Return to wake word detection on error.
            break

# --- Main Execution ---

# Use the default microphone as the audio source.
with sr.Microphone() as source: 
    # Start the listening process by waiting for the wake word.
    listen_for_wake_word(source)